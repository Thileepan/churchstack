<?php
//error_reporting(-1);
//ini_set("display_errors", "1");
$APPLICATION_PATH = "../";

//This files secures the action being triggered by cross-domain attacks
include $APPLICATION_PATH."utils/validateauth.php";

include $APPLICATION_PATH.'utils/JSON.php';
include_once $APPLICATION_PATH . 'classes/class.settings.php';
include_once $APPLICATION_PATH . 'classes/class.users.php';
include_once $APPLICATION_PATH . 'classes/class.profiles.php';
include_once $APPLICATION_PATH . 'classes/class.sms.php';

//process request
$req = $_REQUEST['req'];

if($req == 1)
{
	//list options
	$setting_id = $_REQUEST['opt'];

	$settings_obj = new ProfileSettings($APPLICATION_PATH);
	$option_list = $settings_obj->getOptions($setting_id);
	//print_r($option_list);

	$to_return .= '<div id="divAddOptionForm" style="display:none">';
		$to_return .= '<fieldset>';
			$to_return .= '<legend>Add New Option</legend>';
			$to_return .= '<input type="text" id="inputAddOptionValue" placeholder="Option Name"><BR>';
			$to_return .= '<button type="submit" class="btn btn-primary" onclick="addOrUpdateOption(0);">Add</button>&nbsp;';
			$to_return .= '<button type="submit" class="btn" onclick="hideAddOptionForm();">Cancel</button>';
		$to_return .= '</fieldset>';
	$to_return .= '</div>';

	$to_return .= '<div class="pull-right" id="divAddOptionBtn">';
		$to_return .= '<button class="btn btn-small btn-primary" type="button" onclick="showAddOptionForm();">Add New option</button>';
	$to_return .= '</div>';
	$to_return .= '<BR>';
	$to_return .= '<table id="profileSettings" class="table bordered-table table-striped">';
		$to_return .= '<thead>';
			$to_return .= '<tr>';
				$to_return .= '<th>ID</th>';
				$to_return .= '<th>Value</th>';
				$to_return .= '<th>Actions</th>';
			$to_return .= '</tr>';
		$to_return .= '</thead>';
		$to_return .= '<tbody>';

	$is_options_available = false;
	if(is_array($option_list))
	{
		$total_option = COUNT($option_list);
		if($total_option > 0)
		{
			$is_options_available = true;
			for($i=0; $i<$total_option; $i++)
			{
				$to_return .= '<tr>';						
					$to_return .= '<td>'.$option_list[$i][0].'</td>';
					$to_return .= '<td>';
						$to_return .= '<span id="spnShowOptionValueInfo-'.$i.'">'.$option_list[$i][1].'</span>';
						$to_return .= '<span id="spnEditOptionValueInfo-'.$i.'" style="display:none"><input type="hidden" value="'.$option_list[$i][0].'" id="inputEditOptionID-'.$i.'" /><input type="text" value="'.$option_list[$i][1].'" id="inputEditOptionValue-'.$i.'" /></span>';
					$to_return .= '</td>';
					$to_return .= '<td>';
						$to_return .= '<span id="spnActionInfo-'.$i.'"><i class="curHand icon-pencil" onclick="showEditOptionInfoRow('.$i.');"></i>&nbsp;&nbsp;<i class="curHand icon-trash" onclick="deleteOption('.$i.');"></i></span>';
						$to_return .= '<span id="spnSaveButton-'.$i.'" style="display:none"><button class="btn btn-small btn-success" onclick="addOrUpdateOption(1);">Save</button>&nbsp;<button class="btn btn-small" onclick="hideEditOptionInfoRow('.$i.');">Cancel</button></span>';
					$to_return .= '</td>';
				$to_return .= '</tr>';
			}
		}
	}

	if( !$is_options_available )
	{
		$to_return .= '<tr>';
			$to_return .= '<td colspan="3" align="center">'.'No profile settings available'.'</td>';
		$to_return .= '</tr>';
	}
		$to_return .= '<tr style="display:none"><td colspan="3"><input type="hidden" value="" id="hiddenLastEditedRow" /><input type="hidden" value="'.$setting_id.'" id="hiddenSettingID" /></td></tr>';
		$to_return .= '</tbody>';
	$to_return .= '</table>';

	echo $to_return;
	exit;
}
else if($req == 2)
{
	//add/update new option

	$option_value = trim(stripslashes(rawurldecode($_POST['optionValue'])));
	$option_id = trim(stripslashes(rawurldecode($_POST['optionID'])));
	$is_update = trim($_POST['isUpdate']);
	$setting_id = trim(stripslashes(rawurldecode($_POST['settingID'])));

	$settings_obj = new ProfileSettings($APPLICATION_PATH);
	
	if($is_update) {
		$status = $settings_obj->updateOption($setting_id, $option_id, $option_value);		
	} else {
		$status = $settings_obj->addNewOption($setting_id, $option_value);
	}
	echo $status;
	exit;
}
else if($req == 3)
{
	//delete option value

	$setting_id = trim($_POST['settingID']);
	$option_id = trim($_POST['optionID']);

	$settings_obj = new ProfileSettings($APPLICATION_PATH);
	echo $settings_obj->deleteOption($setting_id, $option_id);
	exit;
}
else if($req == 4)
{
	//Add/Edit New User Form
	$is_update = trim($_POST['isEdit']);
	$user_status_list = array('Active', 'Inactive');

	if($is_update) {
		$user_id = trim($_POST['userID']);
		$users_obj = new Users($APPLICATION_PATH);
		$user_info = $users_obj->getUserInformation($user_id);
	}

	$toReturn = '';
	$toReturn .= '<form class="form-horizontal" onsubmit="return false;">';
			$toReturn .= '<div class="control-group">';
				$toReturn .= '<label class="control-label" for="inputUser">UserName</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="text" id="inputUser" placeholder="UserName" value="'.$user_info[2].'" '.(($is_update)?"disabled":"").'>';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="control-group">';
				$toReturn .= '<label class="control-label" for="inputPwd">Password</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="password" id="inputPwd" placeholder="Password">';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="control-group">';
				$toReturn .= '<label class="control-label" for="inputCPwd">Confirm Password</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="password" id="inputCPwd" placeholder="Confirm Password">';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="control-group">';
				$toReturn .= '<label class="control-label" for="inputUserStatus">Status</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<select id="inputUserStatus">';
						for($i=0; $i<2; $i++) {
							$toReturn .= '<option value="'.($i+1).'" '.(($user_info[5] == ($i+1))?"selected":"").'>'.$user_status_list[$i].'</option>';
						}
					$toReturn .= '</select>';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="form-actions">';
				$toReturn .= '<button class="btn btn-primary" data-loading-text="Loading..." onclick="addOrUpdateUser('.$is_update.');">'.(($is_update)?'Update':'Add User').'</button>&nbsp;';
				if(!$is_update) {
					$toReturn .= '<button class="btn" type="reset">Reset</button>';
				}
				$toReturn .= '<input type="hidden" id="hiddenUserID" value="'.$user_id.'">';
				$toReturn .= '<input type="hidden" id="hiddenUserName" value="'.$user_info[2].'">';
		  $toReturn .= '</div>';
	$toReturn .= '</form>';

	echo $toReturn; exit;
}
else if($req == 5)
{
	session_start();
	//List User
	$users_obj = new Users($APPLICATION_PATH);
	$church_id = ((isset($_SESSION['churchID']) && $_SESSION['churchID'] > 0)?$_SESSION['churchID']:0);
	$users = $users_obj->getAllUsers($church_id);

	$to_return .= '<table class="table table-striped">';
		$to_return .= '<thead>';
			$to_return .= '<tr>';
				$to_return .= '<th>UserName</th>';
				$to_return .= '<th>Assigned To</th>';
				$to_return .= '<th>Role</th>';
				$to_return .= '<th>Status</th>';
				$to_return .= '<th>Actions</th>';
			$to_return .= '</tr>';
		$to_return .= '</thead>';
		$to_return .= '<tbody>';

	$is_users_available = false;
	if(is_array($users))
	{
		$user_count = COUNT($users);
		if($user_count > 0)
		{
			$is_users_available = true;
			for($i=0; $i<$user_count; $i++) {
				$to_return .= '<tr>';
					$to_return .= '<td>'.$users[$i][2].'</td>';
					$to_return .= '<td>'.(($users[$i][4] == 1)?$users[$i][11]:$users[$i][12]).'</td>';
					$to_return .= '<td>'.(($users[$i][4] == 1)?'Administrator':'-').'</td>';
					if($users[$i][9] == 1) {
						$spn_class = 'label label-success';
						$spn_text = 'Active';
						if($_SESSION['userID'] == $users[$i][0]) {
							$spn_text = 'Logged In';
						}
					} else {
						$spn_class = 'label label-important';
						$spn_text = 'Inactive';
					}
					$to_return .= '<td><span class="'.$spn_class.'">'.$spn_text.'</span></td>';
					$to_return .= '<td>';
						$to_return .= '<div class="dropdown">';
							$to_return .= '<i class="curHand icon-pencil" onclick="GetAddOrEditUserForm(1, '.$users[$i][0].');"></i>&nbsp;&nbsp;';
							if($_SESSION['userID'] != $users[$i][0]) {
								$to_return .= '<i class="curHand icon-trash" onclick="deleteUserConfirmation('.$users[$i][0].', \''.$users[$i][2].'\');"></i>&nbsp;&nbsp;';
							}
						$to_return .= '</div>';
					$to_return .= '</td>';
				$to_return .= '</tr>';
			}
		}
	}
	
	if( !$is_users_available )
	{
		$to_return .= '<tr>';
			$to_return .= '<td colspan="4" align="center">'.'No users available'.'</td>';
		$to_return .= '</tr>';
	}
		$to_return .= '</tbody>';
	$to_return .= '</table>';
	echo $to_return;
	exit;
}
else if($req == 6)
{
	//Add/Edit User
	session_start();
	$user_name = trim(stripslashes(rawurldecode($_POST['userName'])));
	$password = md5(trim(stripslashes(rawurldecode($_POST['password']))));
	$is_update = trim($_POST['isUpdate']);
	$prev_user = trim(stripslashes(rawurldecode($_POST['prevUser'])));
	$user_status = trim(stripslashes(rawurldecode($_POST['userStatus'])));
	$user_full_name = trim(stripslashes(rawurldecode($_POST['userFullName'])));
	$church_id = $_SESSION['churchID'];
	$role_id = 2; //Administrator Login
	
	$users_obj = new Users($APPLICATION_PATH);

	$check_user_exists = true;
	if($is_update && $prev_user === $user_name) {
		$check_user_exists = false;
	}

	if($check_user_exists) {
		if($users_obj->isUserAlreadyExists($user_name, $user_name)) {
			echo 1;
			exit;
		}
	}

	if($is_update) {
		$user_id = trim($_POST['userID']);
		$to_return = $users_obj->updateUser($user_id, $user_name, $password, $role_id, $user_status);
	} else {
		$to_return = $users_obj->addNewUser($church_id, $user_full_name, $user_name, $password, $role_id, $user_status);
	}

	$json = new Services_JSON();
	$encode_obj = $json->encode($to_return);
	unset($json);

	echo $encode_obj;
	exit;
}
else if($req == 7)
{
	//Delete User
	
	session_start();
	$user_id = trim(stripslashes(rawurldecode($_POST['user'])));
	if($user_id == $_SESSION['userID']) {
		echo 2; exit; //logged in user can't be delete.
	}
	$users_obj = new Users($APPLICATION_PATH);
	echo $users_obj->deleteUser($user_id);
	exit;
}
else if($req == 8)
{
	//list profile custom fields
	$settings_obj = new ProfileSettings($APPLICATION_PATH);
	$field_details = $settings_obj->getAllCustomProfileFields();

	$field_type = array(1=>'Text', 'Number', 'Password', 'Date', 'Link/URL', 'Drop Down', 'Tick Box', 'Text Area');
	
	$to_return .= '<div class="pull-right" id="divAddOptionBtn">';
		$to_return .= '<button class="btn btn-small btn-primary" type="button" onclick="GetAddOrEditCustomFieldForm(0);">Add New Custom Field</button>';
	$to_return .= '</div>';
	$to_return .= '<BR>';
	$to_return .= '<table class="table table-striped">';
		$to_return .= '<thead>';
			$to_return .= '<tr>';
				$to_return .= '<th>Name</th>';
				$to_return .= '<th>Type</th>';
				$to_return .= '<th>Is Required</th>';
//				$to_return .= '<th>Validation Regex</th>';
				$to_return .= '<th>Actions</th>';
			$to_return .= '</tr>';
		$to_return .= '</thead>';
		$to_return .= '<tbody>';

	$is_fields_available = false;
	if(is_array($field_details))
	{
		$field_count = COUNT($field_details);
		if($field_count > 0)
		{
			$is_fields_available = true;
			for($i=0; $i<$field_count; $i++) {
				$to_return .= '<tr>';
					$to_return .= '<td>'.$field_details[$i][1].'</td>';
					$to_return .= '<td>'.$field_type[$field_details[$i][2]].'</td>';
					$to_return .= '<td>'.(($field_details[$i][2] == 7)?'NA':(($field_details[$i][5] == 1)?"Yes":"No")).'</td>';
//					$to_return .= '<td>'.$field_details[$i][6].'</td>';
					$to_return .= '<td>';
						$to_return .= '<div class="dropdown">';
							$to_return .= '<i class="curHand icon-pencil" onclick="GetAddOrEditCustomFieldForm(1, '.$field_details[$i][0].');"></i>&nbsp;&nbsp;';
							$to_return .= '<i class="curHand icon-trash" onclick="deleteCustomFieldConfirmation('.$field_details[$i][0].', \''.$field_details[$i][1].'\');"></i>&nbsp;&nbsp;';
						$to_return .= '</div>';
					$to_return .= '</td>';
				$to_return .= '</tr>';
			}
		}
	}
	
	if( !$is_fields_available )
	{
		$to_return .= '<tr>';
			$to_return .= '<td colspan="5" align="center">'.'No custom profile fields available'.'</td>';
		$to_return .= '</tr>';
	}
		$to_return .= '</tbody>';
	$to_return .= '</table>';
	echo $to_return;
	exit;
}
else if($req == 9)
{
	//get add/edit profile custom field form

	$field_type = array(1=>'Text', 'Number', 'Password', 'Date', 'Link/URL', 'Drop Down', 'Tick Box', 'Text Area');
	$is_update = trim($_POST['isEdit']);
	$field_id = trim($_POST['fieldID']);

	if($is_update) {
		$settings_obj = new ProfileSettings($APPLICATION_PATH);
		$field_details = $settings_obj->getCustomProfileFieldDetails($field_id);
		$field_id = $field_details[0];
		$field_name = $field_details[1];
		$field_type_value = $field_details[2];
		$field_options = $field_details[3];
		$field_help_message = $field_details[4];
		$is_required = $field_details[5];
		$validation_string = $field_details[6];
		$display_order = $field_details[7];
	}

	$toReturn = '';
	$toReturn .= '<form class="form-horizontal" onsubmit="return false;">';
			$toReturn .= '<div class="control-group">';
				$toReturn .= '<label class="control-label" for="inputFieldName">Field Name</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="text" id="inputFieldName" placeholder="Field Name" value="'.$field_name.'">';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="control-group">';
				$toReturn .= '<label class="control-label" for="inputFieldType">Field Type</label>';
				$toReturn .= '<div class="controls">';
					if(!$is_update)
					{
						$toReturn .= '<select id="inputFieldType" onchange="showOrHideFieldOptions(this);">';
						for($i=1; $i<=COUNT($field_type); $i++)
						{
							$toReturn .= '<option value="'.$i.'" '.(($field_type_value == $i)?"selected":"").'>'.$field_type[$i].'</option>';
						}
						$toReturn .= '</select>';
					}
					else
					{
						$toReturn .= '<b>'.$field_type[$field_type_value].'</b>';
						$toReturn .= '<input type="hidden" id="hiddenFieldType" value="'.$field_type_value.'" />';
					}
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div id="divFieldOptions" class="control-group" style="display:'.(($field_type_value == 6)?"":"none").'">';
				$toReturn .= '<label class="control-label" for="inputFieldOptions">Field Options</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="text" id="inputFieldOptions" placeholder="Field Options" value="'.$field_options.'"><BR>';
					$toReturn .= '<span class="muted">For Dropdowns Only - Comma Seperated List</span>';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="control-group" style="display:none;">';
				$toReturn .= '<label class="control-label" for="inputValidationString">Validation</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="text" id="inputValidationString" placeholder="Regular Expression" value="'.$validation_string.'">';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div id="divIsFieldRequired" class="control-group" style="display:'.(($field_type_value == 7)?"none":"").'">';
				$toReturn .= '<label class="control-label" for="inputIsRequired">Is Required</label>';
				$toReturn .= '<div class="controls">';
					$toReturn .= '<input type="checkbox" id="inputIsRequired" '.(($is_required)?"checked":"").'>';
				$toReturn .= '</div>';
		  $toReturn .= '</div>';
		  $toReturn .= '<div class="form-actions">';
				$toReturn .= '<button class="btn btn-primary" data-loading-text="Loading..." onclick="addOrUpdateCustomFields('.$is_update.');">'.(($is_update)?'Update':'Add').'</button>&nbsp;';
				if(!$is_update) {
					$toReturn .= '<button class="btn" type="reset">Reset</button>';
				}
				$toReturn .= '<input type="hidden" id="hiddenFieldID" value="'.$field_id.'">';
		  $toReturn .= '</div>';
	$toReturn .= '</form>';

	echo $toReturn; exit;
}
else if($req == 10)
{
	//add/edit profile custom field values

	$is_update = trim($_POST['isUpdate']);
	$field_id = trim(stripslashes(rawurldecode($_POST['fieldID'])));
	$field_name = trim(stripslashes(rawurldecode($_POST['fieldName'])));
	$field_type = trim(stripslashes(rawurldecode($_POST['fieldType'])));
	$field_options = trim(stripslashes(rawurldecode($_POST['fieldOptions'])));
	$field_help_message = trim(stripslashes(rawurldecode($_POST['fieldHelpMsg'])));
	$is_required = trim($_POST['isRequired']);
	$validation_string = trim(stripslashes(rawurldecode($_POST['validationString'])));
	$display_order = trim(stripslashes(rawurldecode($_POST['displayOrder'])));	

	$settings_obj = new ProfileSettings($APPLICATION_PATH);
	if($is_update) {
		$is_updated = $settings_obj->updateCustomField($field_id, $field_name, $field_type, $field_options, $field_help_message, $is_required, $validation_string, $display_order);
	} else {
		$is_updated = $settings_obj->addNewCustomField($field_name, $field_type, $field_options, $field_help_message, $is_required, $validation_string, $display_order);
	}

	echo $is_updated;
	exit;
}
else if($req == 11)
{
	//Delete Custom Field
	
	$to_return = array();
	$field_id = trim($_POST['fieldID']);
	$settings_obj = new ProfileSettings($APPLICATION_PATH);

	$profiles_obj = new Profiles($APPLICATION_PATH);
	if(!$profiles_obj->isCustomProfileFieldUsed($field_id)) {
		if($settings_obj->deleteCustomField($field_id)) {
			$to_return[0] = 1;
			$to_return[1] = 'Custom field has been deleted successfully!';
		} else {
			$to_return[0] = 0;
			$to_return[1] = 'Unable to delete the custom field';
		}
	} else {
		$to_return[0] = 0;
		$to_return[1] = 'Custom field is being used in profiles. It can\'t be deleted.';
	}
	
	$json = new Services_JSON();
	$encode_obj = $json->encode($to_return);
	unset($json);

	echo $encode_obj;	
	exit;
}
else if($req == 12)
{
	$to_return = '';
	$to_return .= '<div class="tabbable">';
		$to_return .= '<ul class="nav nav-tabs">';
			$to_return .= '<li id="currentGatewayTab" class="active" onclick="loadSMSConfig(1, 0);"><a href="#currentGatewayTab" data-toggle="tab">Current SMS Gateway</a></li>';
			$to_return .= '<li id="chooseGatewayTab"  onclick="loadSMSConfig(2, 0);"><a href="#chooseGatewayTab" data-toggle="tab">Choose SMS Gateway</a></li>';
		$to_return .= '</ul>';
		$to_return .= '<div class="tab-content">';
			$to_return .= '<div class="tab-pane active" id="currentGatewayDiv">';
			$to_return .= '</div>';
			$to_return .= '<div class="tab-pane" id="chooseGatewayDiv">';
			$to_return .= '</div>';
		$to_return .= '</div>';
	$to_return .= '</div>';

	echo $to_return;
	exit;
}
else if($req==13)
{
	$tabType = trim($_POST["tabType"]);
	$sms_obj =  new SMS($APPLICATION_PATH);
	if($tabType==1)
	{
		$sms_result = $sms_obj->getSMSConfiguration();
		if($sms_result[0]==1)
		{
			$active_gateway_available = 0;
			if(is_array($sms_result[1]) && $sms_result[1]["SMS_ENABLED"] == 1 && $sms_result[1]["SMS_PROVIDER_ID"] > 0)
			{
				if($sms_result[1]["SMS_PROVIDER_ID"] == 1)//Twilio
				{
					$twilio_config = $sms_obj->getTwilioConfig(1);
					if($twilio_config[0]==1 && COUNT($twilio_config[1]) > 0)
					{
						$active_gateway_available = 1;
						$divHTML = '<div class="span11">';
							$divHTML .= '<div class="span3"><a href="https://www.twilio.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/twilio-logo.png"></a></div>';
						$divHTML .= '</div>';
						$divHTML .= '<div class="row-fluid">';
							$divHTML .= '<div class="span8">';
								$divHTML .= '<div>';
									$divHTML .= '<b>Account SID : </b>'.$twilio_config[1][0][1].'';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									$divHTML .= '<b>Auth Token : </b>'.$twilio_config[1][0][2].'';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									$divHTML .= '<b>From Number : </b>'.$twilio_config[1][0][3].'';
								$divHTML .= '</div>';
								$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="loadSMSConfig(2, 0); chooseSMSGateway(1, 1);">Edit Details</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-danger" type="submit" onclick="saveTwilioConfig(3);">Delete</button></div>';
							$divHTML .= '</div>';
						$divHTML .= '</div>';
					}
				}
				else if($sms_result[1]["SMS_PROVIDER_ID"] == 2)//Nexmo
				{
					$nexmo_config = $sms_obj->getNexmoConfig(1);
					if($nexmo_config[0]==1 && COUNT($nexmo_config[1]) > 0)
					{
						$active_gateway_available = 1;
						$divHTML = '<div class="span11">';
							$divHTML .= '<div class="span3"><a href="https://www.nexmo.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/nexmo-logo.png"></a></div>';
						$divHTML .= '</div>';
						$divHTML .= '<div class="row-fluid">';
							$divHTML .= '<div class="span8">';
								$divHTML .= '<div>';
									$divHTML .= '<b>API Key : </b>'.$nexmo_config[1][0][1].'';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									$divHTML .= '<b>API Secret : </b>'.$nexmo_config[1][0][2].'';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									$divHTML .= '<b>From Number : </b>'.$nexmo_config[1][0][3].'';
								$divHTML .= '</div>';
								$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="loadSMSConfig(2, 0); chooseSMSGateway(2, 1);">Edit Details</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-danger" type="submit" onclick="saveNexmoConfig(3);">Delete</button></div>';
							$divHTML .= '</div>';
						$divHTML .= '</div>';
					}
				}
				else if($sms_result[1]["SMS_PROVIDER_ID"] == 3)//BhashSMS
				{
					$bhashSMS_config = $sms_obj->getBhashSMSConfig(1);
					if($bhashSMS_config[0]==1 && COUNT($bhashSMS_config[1]) > 0)
					{
						$active_gateway_available = 1;
						$divHTML = '<div class="span11">';
							$divHTML .= '<div class="span3"><a href="http://www.bhashsms.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/bhashsms-logo.png"></a></div>';
						$divHTML .= '</div>';
						$divHTML .= '<div class="row-fluid">';
							$divHTML .= '<div class="span8">';
								$divHTML .= '<div>';
									$divHTML .= '<b>Username : </b>'.$bhashSMS_config[1][0][1].'';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									//$divHTML .= '<b>Password : </b>'.$bhashSMS_config[1][0][2].'';
									$divHTML .= '<b>Password : </b>************';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									$divHTML .= '<b>Sender ID : </b>'.$bhashSMS_config[1][0][3].'';
								$divHTML .= '</div>';
								$divHTML .= '<div>';
									$divHTML .= '<b>Priority : </b>'.$bhashSMS_config[1][0][4].'';
								$divHTML .= '</div>';
								$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="loadSMSConfig(2, 0); chooseSMSGateway(3, 1);">Edit Details</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-danger" type="submit" onclick="saveBhashSMSConfig(3);">Delete</button></div>';
							$divHTML .= '</div>';
						$divHTML .= '</div>';
					}
				}
			}

			if($active_gateway_available == 0)
			{
				$divHTML = '';
				$divHTML .= '<div style="padding-bottom:6px;" class="text-warning">You have not yet configured any SMS gateway to use it for SMS notifications. You must select an SMS gateway and give your credentials inorder to trigger SMS notifications to your church members.</div>';
				$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="document.getElementById(\'chooseGatewayTab\').click();">Choose an SMS Gateway Now</button></div>';
			}
		}
		else
		{
			$divHTML = '<font color="red">'.$sms_result[1].'</font>';
		}
	}
	else if($tabType==2)
	{
		$is_twilio_chosen = 0;
		$is_nexmo_chosen = 0;
		$is_bhashsms_chosen = 0;
		$sms_obj =  new SMS($APPLICATION_PATH);
		$sms_result = $sms_obj->getSMSConfiguration();
		if($sms_result[0]==1)
		{
			$active_gateway_available = 0;
			if(is_array($sms_result[1]) && $sms_result[1]["SMS_ENABLED"] == 1 && $sms_result[1]["SMS_PROVIDER_ID"] > 0)
			{
				if($sms_result[1]["SMS_PROVIDER_ID"] == 1) {//Twilio
					$is_twilio_chosen = 1;
				}
				if($sms_result[1]["SMS_PROVIDER_ID"] == 2) {//Nexmo
					$is_nexmo_chosen = 1;
				}
				if($sms_result[1]["SMS_PROVIDER_ID"] == 3) {//BhashSMS
					$is_bhashsms_chosen = 1;
				}
			}
		}
		$divHTML = '<div class="span11">';
		$divHTML .= '<div class="span3"><a href="https://www.twilio.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/twilio-logo.png"></a></div>';
		$divHTML .= '<div style="padding-top:12px;vertial-align:middle;" class="span3"><a href="'.TWILIO_HELP_DOC_URL.'" target="_blank"><h3>Help Document</h3></a></div>';
		if($is_twilio_chosen==1) {
			$divHTML .= '<div style="padding-top:12px;" class="span6"><button class="btn-large btn-success" type="submit" style="width:180px;" onclick="loadSMSConfig(1, 0);">Currently Active</button></div>';
		} else {
			$divHTML .= '<div style="padding-top:12px;" class="span6"><button class="btn-large btn-primary" type="submit" onclick="chooseSMSGateway(1, 0);" style="width:180px;">Choose This</button></div>';
		}
		$divHTML .= '</div>';
		$divHTML .= '<div class="span11" style="display:;">';
		$divHTML .= '<div class="span3"><a href="https://www.nexmo.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/nexmo-logo.png"></a></div>';
		$divHTML .= '<div style="padding-top:12px;vertial-align:middle;" class="span3"><a href="'.NEXMO_HELP_DOC_URL.'" target="_blank"><h3>Help Document</h3></a></div>';
		if($is_nexmo_chosen==1) {
			$divHTML .= '<div style="padding-top:12px;" class="span6"><button class="btn-large btn-success" type="submit" style="width:180px;" onclick="loadSMSConfig(1, 0);">Currently Active</button></div>';
		} else {
			$divHTML .= '<div style="padding-top:12px;" class="span6"><button class="btn-large btn-primary" type="submit" onclick="chooseSMSGateway(2, 0);" style="width:180px;">Choose This</button></div>';
		}
		$divHTML .= '</div>';
		$divHTML .= '<div class="span11" style="display:;">';
		$divHTML .= '<div class="span3"><a href="http://bhashsms.com/" target="_blank"><img src="'.$APPLICATION_PATH.'images/bhashsms-logo.png"></a></div>';
		$divHTML .= '<div style="padding-top:12px;vertial-align:middle;" class="span3"><a href="'.BHASHSMS_HELP_DOC_URL.'" target="_blank"><h3>Help Document</h3></a></div>';
		if($is_bhashsms_chosen==1) {
			$divHTML .= '<div style="padding-top:12px;" class="span6"><button class="btn-large btn-success" type="submit" style="width:180px;" onclick="loadSMSConfig(1, 0);">Currently Active</button></div>';
		} else {
			$divHTML .= '<div style="padding-top:12px;" class="span6"><button class="btn-large btn-primary" type="submit" onclick="chooseSMSGateway(3, 0);" style="width:180px;">Choose This</button></div>';
		}
		$divHTML .= '</div>';
	}

	$ret_array = array("tabType"=>$tabType, "divHTML"=>$divHTML);
	$json = new Services_JSON();
	$encode_obj = $json->encode($ret_array);
	unset($json);

	echo $encode_obj;
	exit;
}
else if($req==14)
{
	$gatewayType = trim($_POST["gatewayType"]);
	$isEdit = trim($_POST["isEdit"]);

	if($gatewayType == 1)//Twilio
	{
		$account_sid = "";
		$auth_token = "";
		$from_number = "";
		if($isEdit == 1) {
			$sms_obj = new SMS($APPLICATION_PATH);
			$get_result = $sms_obj->getTwilioConfig(1);
			if($get_result[0]==1 && COUNT($get_result[1]) > 0)
			{
				$account_sid = $get_result[1][0][1];
				$auth_token = $get_result[1][0][2];
				$from_number = $get_result[1][0][3];
			}
		}

		$divHTML = '<div class="span12">';
			$divHTML .= '<div class="span3"><a href="https://www.twilio.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/twilio-logo.png"></a></div>';
			$divHTML .= '<div style="padding-top:12px;vertial-align:middle;" class="span6"><a href="'.TWILIO_HELP_DOC_URL.'" target="_blank"><h3>Help Document</h3></a></div>';
		$divHTML .= "</div>";
		//$divHTML .= '<div style="padding-bottom:6px;" class="text-warning">This is the email address with which you will login to your church account. All notifications and invoices will also be sent to this email address only. Make sure you have access to the new email address you are going to specify now.</div>';
		$divHTML .= '<div class="span12"><BR/>&nbsp;';
		$divHTML .= "</div>";
		$divHTML .= '<div class="span6">';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtAccountSID">Account SID</label><div class="controls"><input type="text" id="txtAccountSID" placeholder="Account SID" value="'.$account_sid.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtAuthToken">Auth Token</label><div class="controls"><input type="text" id="txtAuthToken" placeholder="Auth Token" value="'.$auth_token.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtFromNumber">From Number</label><div class="controls"><input type="text" id="txtFromNumber" placeholder="From Number" value="'.$from_number.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtTestToNumber">Recipient Number</label><div class="controls"><input type="text" id="txtTestToNumber" placeholder="Recipient Mobile Num (To Test)" value=""></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtMessage">SMS Message</label><div class="controls"><input type="text" id="txtMessage" placeholder="SMS Message Body" value=""></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="saveTwilioConfig(1);">Save & Activate</button>&nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" type="submit" onclick="saveTwilioConfig(2);">Test Configuration</button></div>';
		$divHTML .= "</div>";
	}
	else if($gatewayType == 2)//Nexmo
	{
		$api_key = "";
		$api_secret = "";
		$from_number = "";
		if($isEdit == 1) {
			$sms_obj = new SMS($APPLICATION_PATH);
			$get_result = $sms_obj->getNexmoConfig(1);
			if($get_result[0]==1 && COUNT($get_result[1]) > 0)
			{
				$api_key = $get_result[1][0][1];
				$api_secret = $get_result[1][0][2];
				$from_number = $get_result[1][0][3];
			}
		}

		$divHTML = '<div class="span12">';
			$divHTML .= '<div class="span3"><a href="https://www.nexmo.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/nexmo-logo.png"></a></div>';
			$divHTML .= '<div style="padding-top:12px;vertial-align:middle;" class="span6"><a href="'.NEXMO_HELP_DOC_URL.'" target="_blank"><h3>Help Document</h3></a></div>';
		$divHTML .= "</div>";
		//$divHTML .= '<div style="padding-bottom:6px;" class="text-warning">This is the email address with which you will login to your church account. All notifications and invoices will also be sent to this email address only. Make sure you have access to the new email address you are going to specify now.</div>';
		$divHTML .= '<div class="span12"><BR/>&nbsp;';
		$divHTML .= "</div>";
		$divHTML .= '<div class="span6">';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtAPIKey">API Key</label><div class="controls"><input type="text" id="txtAPIKey" placeholder="API Key" value="'.$api_key.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtAPISecret">API Secret</label><div class="controls"><input type="text" id="txtAPISecret" placeholder="API Secret" value="'.$api_secret.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtFromNumber">From Number</label><div class="controls"><input type="text" id="txtFromNumber" placeholder="From Number" value="'.$from_number.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtTestToNumber">Recipient Number</label><div class="controls"><input type="text" id="txtTestToNumber" placeholder="Recipient Mobile Num (To Test)" value=""></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtMessage">SMS Message</label><div class="controls"><input type="text" id="txtMessage" placeholder="SMS Message Body" value=""></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="saveNexmoConfig(1);">Save & Activate</button>&nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" type="submit" onclick="saveNexmoConfig(2);">Test Configuration</button></div>';
		$divHTML .= "</div>";
	}
	else if($gatewayType == 3)//BhashSMS
	{
		$username = "";
		$password = "";
		$sender_id = "";
		$priority = "";
		if($isEdit == 1) {
			$sms_obj = new SMS($APPLICATION_PATH);
			$get_result = $sms_obj->getBhashSMSConfig(1);
			if($get_result[0]==1 && COUNT($get_result[1]) > 0)
			{
				$username = $get_result[1][0][1];
				$password = $get_result[1][0][2];
				$sender_id = $get_result[1][0][3];
				$priority = $get_result[1][0][4];
			}
		}

		$divHTML = '<div class="span12">';
			$divHTML .= '<div class="span3"><a href="http://www.bhashsms.com" target="_blank"><img src="'.$APPLICATION_PATH.'images/bhashsms-logo.png"></a></div>';
			$divHTML .= '<div style="padding-top:12px;vertial-align:middle;" class="span6"><a href="'.BHASHSMS_HELP_DOC_URL.'" target="_blank"><h3>Help Document</h3></a></div>';
		$divHTML .= "</div>";
		//$divHTML .= '<div style="padding-bottom:6px;" class="text-warning">This is the email address with which you will login to your church account. All notifications and invoices will also be sent to this email address only. Make sure you have access to the new email address you are going to specify now.</div>';
		$divHTML .= '<div class="span12"><BR/>&nbsp;';
		$divHTML .= "</div>";
		$divHTML .= '<div class="span6">';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtUsername">Username</label><div class="controls"><input type="text" id="txtUsername" placeholder="Username" value="'.$username.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtPassword">Password</label><div class="controls"><input type="password" id="txtPassword" placeholder="Password" value="'.$password.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtSenderID">Sender ID</label><div class="controls"><input type="text" id="txtSenderID" placeholder="Sender ID" value="'.$sender_id.'"></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtPriority">Priority</label><div class="controls"><select id="txtPriority">';
				$divHTML .= '<option value="ndnd" '.(($priority=="ndnd" || $priority=="")? 'selected' : '').'>ndnd</option>';
				$divHTML .= '<option value="dnd" '.(($priority=="dnd")? 'selected' : '').'>dnd</option>';
			$divHTML .= '</select></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtTestToNumber">Recipient Number</label><div class="controls"><input type="text" id="txtTestToNumber" placeholder="Recipient Mobile Num (To Test)" value=""></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><label class="control-label" for="txtMessage">SMS Message</label><div class="controls"><input type="text" id="txtMessage" placeholder="SMS Message Body" value=""></div></div>';
			$divHTML .= '<div style="padding-bottom:6px;"><button class="btn btn-primary" type="submit" onclick="saveBhashSMSConfig(1);">Save & Activate</button>&nbsp;&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" type="submit" onclick="saveBhashSMSConfig(2);">Test Configuration</button></div>';
		$divHTML .= "</div>";
	}


	$ret_array = array("gatewayType"=>$gatewayType, "divHTML"=>$divHTML);
	$json = new Services_JSON();
	$encode_obj = $json->encode($ret_array);
	unset($json);

	echo $encode_obj;
	exit;
}
else if($req==15)
{
	$saveType = trim($_POST["saveType"]);
	$account_sid = trim(stripslashes(rawurldecode($_POST["txtAccountSID"])));
	$auth_token = trim(stripslashes(rawurldecode($_POST["txtAuthToken"])));
	$from_number = trim(stripslashes(rawurldecode($_POST["txtFromNumber"])));
	$test_to_number = trim(stripslashes(rawurldecode($_POST["txtTestToNumber"])));
	$message = trim(stripslashes(rawurldecode($_POST["txtMessage"])));
	$rsno = 0;
	$msg = "Failed to perform the action specified";

	$sms_obj = new SMS($APPLICATION_PATH);
	if($saveType == 1)
	{
		$status=1;
		$rsno = 0;
		$msg = "Unable to save the configuration";
		/**/
		$all_twilio_configs = $sms_obj->getTwilioConfig(0);
		if($all_twilio_configs[0] == 1)
		{
			for($t=0; $t < COUNT($all_twilio_configs[1]); $t++)
			{
				$delete_res = $sms_obj->deleteTwilioConfig($all_twilio_configs[1][$t][0]);
				//$disable_res = $sms_obj->disableTwilioConfig($all_twilio_configs[1][$t][0]);
			}
		}
		$res = $sms_obj->enableSMSFeature();
		$res = $sms_obj->updateSMSProvider(1);

		$save_res = $sms_obj->addTwilioConfig($account_sid, $auth_token, $from_number, $status);
		$rsno = $save_res[0];
		$msg = $save_res[1];

		$all_twilio_configs = array();
		$all_twilio_configs = $sms_obj->getTwilioConfig(0);
		if($all_twilio_configs[0] == 1 && COUNT($all_twilio_configs[1]) > 0)
		{
			$config_id = $all_twilio_configs[1][0][0];
		}
		$res = $sms_obj->enableTwilioConfig($config_id);
		/**/
	}
	else if($saveType == 4)
	{
		$sms_obj = new SMS($APPLICATION_PATH);
		$rsno = 0;
		$msg = "Unable to delete the configuration";
		$all_twilio_configs = $sms_obj->getTwilioConfig(0);
		if($all_twilio_configs[0] == 1)
		{
			for($t=0; $t < COUNT($all_twilio_configs[1]); $t++)
			{
				$delete_res = $sms_obj->deleteTwilioConfig($all_twilio_configs[1][$t][0]);
				//$disable_res = $sms_obj->disableTwilioConfig($all_twilio_configs[1][$t][0]);
			}
		}
		$res = $sms_obj->disableSMSFeature();
		if($res[0]==1) {
			$rsno = 1;
			$msg = "Configuration has been deleted successfully and SMS notifications deactivated.";
		}
	}
	else
	{
		$rsno = 0;
		$msg = "Unable to test the configuration";

		$test_res = $sms_obj->testTwilioConfig($account_sid, $auth_token, $from_number, $test_to_number, $message);
		$rsno = $test_res[0];
		$msg = $test_res[1];
	}

	$ret_array = array("saveType"=>$saveType, "rsno"=>$rsno, "msg"=>$msg);
	$json = new Services_JSON();
	$encode_obj = $json->encode($ret_array);
	unset($json);

	echo $encode_obj;
	exit;
}
else if($req==16)
{
	$saveType = trim($_POST["saveType"]);
	$api_key = trim(stripslashes(rawurldecode($_POST["txtAPIKey"])));
	$api_secret = trim(stripslashes(rawurldecode($_POST["txtAPISecret"])));
	$from_number = trim(stripslashes(rawurldecode($_POST["txtFromNumber"])));
	$test_to_number = trim(stripslashes(rawurldecode($_POST["txtTestToNumber"])));
	$message = trim(stripslashes(rawurldecode($_POST["txtMessage"])));
	$rsno = 0;
	$msg = "Failed to perform the action specified";

	$sms_obj = new SMS($APPLICATION_PATH);
	if($saveType == 1)
	{
		$status=1;
		$rsno = 0;
		$msg = "Unable to save the configuration";
		/**/
		$all_nexmo_configs = $sms_obj->getNexmoConfig(0);
		if($all_nexmo_configs[0] == 1)
		{
			for($t=0; $t < COUNT($all_nexmo_configs[1]); $t++)
			{
				$delete_res = $sms_obj->deleteNexmoConfig($all_nexmo_configs[1][$t][0]);
				//$disable_res = $sms_obj->disableNexmoConfig($all_nexmo_configs[1][$t][0]);
			}
		}
		$res = $sms_obj->enableSMSFeature();
		$res = $sms_obj->updateSMSProvider(2);

		$save_res = $sms_obj->addNexmoConfig($api_key, $api_secret, $from_number, $status);
		$rsno = $save_res[0];
		$msg = $save_res[1];

		$all_nexmo_configs = array();
		$all_nexmo_configs = $sms_obj->getNexmoConfig(0);
		if($all_nexmo_configs[0] == 1 && COUNT($all_nexmo_configs[1]) > 0)
		{
			$config_id = $all_nexmo_configs[1][0][0];
		}
		$res = $sms_obj->enableNexmoConfig($config_id);
		/**/
	}
	else if($saveType == 4)
	{
		$sms_obj = new SMS($APPLICATION_PATH);
		$rsno = 0;
		$msg = "Unable to delete the configuration";
		$all_nexmo_configs = $sms_obj->getNexmoConfig(0);
		if($all_nexmo_configs[0] == 1)
		{
			for($t=0; $t < COUNT($all_nexmo_configs[1]); $t++)
			{
				$delete_res = $sms_obj->deleteNexmoConfig($all_nexmo_configs[1][$t][0]);
				//$disable_res = $sms_obj->disableNexmoConfig($all_nexmo_configs[1][$t][0]);
			}
		}
		$res = $sms_obj->disableSMSFeature();
		if($res[0]==1) {
			$rsno = 1;
			$msg = "Configuration has been deleted successfully and SMS notifications deactivated.";
		}
	}
	else
	{
		$rsno = 0;
		$msg = "Unable to test the configuration";

		$test_res = $sms_obj->testNexmoConfig($api_key, $api_secret, $from_number, $test_to_number, $message);
		$rsno = $test_res[0];
		$msg = $test_res[1];
	}

	$ret_array = array("saveType"=>$saveType, "rsno"=>$rsno, "msg"=>$msg);
	$json = new Services_JSON();
	$encode_obj = $json->encode($ret_array);
	unset($json);

	echo $encode_obj;
	exit;
}
else if($req==17)
{
	$saveType = trim($_POST["saveType"]);
	$username = trim(stripslashes(rawurldecode($_POST["txtUsername"])));
	$password = trim(stripslashes(rawurldecode($_POST["txtPassword"])));
	$sender_id = trim(stripslashes(rawurldecode($_POST["txtSenderID"])));
	$priority = trim(stripslashes(rawurldecode($_POST["txtPriority"])));
	$test_to_number = trim(stripslashes(rawurldecode($_POST["txtTestToNumber"])));
	$message = trim(stripslashes(rawurldecode($_POST["txtMessage"])));
	$rsno = 0;
	$msg = "Failed to perform the action specified";

	$sms_obj = new SMS($APPLICATION_PATH);
	if($saveType == 1)
	{
		$status=1;
		$rsno = 0;
		$msg = "Unable to save the configuration";
		/**/
		$all_bhashSMS_configs = $sms_obj->getBhashSMSConfig(0);
		if($all_bhashSMS_configs[0] == 1)
		{
			for($t=0; $t < COUNT($all_bhashSMS_configs[1]); $t++)
			{
				$delete_res = $sms_obj->deleteBhashSMSConfig($all_bhashSMS_configs[1][$t][0]);
				//$disable_res = $sms_obj->disableBhashSMSConfig($all_bhashSMS_configs[1][$t][0]);
			}
		}
		$res = $sms_obj->enableSMSFeature();
		$res = $sms_obj->updateSMSProvider(3);

		$save_res = $sms_obj->addBhashSMSConfig($username, $password, $sender_id, $priority, $from_number, $status);
		$rsno = $save_res[0];
		$msg = $save_res[1];

		$all_bhashSMS_configs = array();
		$all_bhashSMS_configs = $sms_obj->getBhashSMSConfig(0);
		if($all_bhashSMS_configs[0] == 1 && COUNT($all_bhashSMS_configs[1]) > 0)
		{
			$config_id = $all_bhashSMS_configs[1][0][0];
		}
		$res = $sms_obj->enableBhashSMSConfig($config_id);
		/**/
	}
	else if($saveType == 4)
	{
		$sms_obj = new SMS($APPLICATION_PATH);
		$rsno = 0;
		$msg = "Unable to delete the configuration";
		$all_bhashSMS_configs = $sms_obj->getBhashSMSConfig(0);
		if($all_bhashSMS_configs[0] == 1)
		{
			for($t=0; $t < COUNT($all_bhashSMS_configs[1]); $t++)
			{
				$delete_res = $sms_obj->deleteBhashSMSConfig($all_bhashSMS_configs[1][$t][0]);
				//$disable_res = $sms_obj->disableBhashSMSConfig($all_BhashSMS_configs[1][$t][0]);
			}
		}
		$res = $sms_obj->disableSMSFeature();
		if($res[0]==1) {
			$rsno = 1;
			$msg = "Configuration has been deleted successfully and SMS notifications deactivated.";
		}
	}
	else
	{
		$rsno = 0;
		$msg = "Unable to test the configuration";

		$test_res = $sms_obj->testBhashSMSConfig($username, $password, $sender_id, $priority, $test_to_number, $message);
		$rsno = $test_res[0];
		$msg = $test_res[1];
	}

	$ret_array = array("saveType"=>$saveType, "rsno"=>$rsno, "msg"=>$msg);
	$json = new Services_JSON();
	$encode_obj = $json->encode($ret_array);
	unset($json);

	echo $encode_obj;
	exit;
}

?>
